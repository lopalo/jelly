
(define *queue* ())
(define *scheduler* ())

(define enqueue
  (lambda [x]
    (set! *queue* (append *queue* (list x)))))

(define dequeue
  (lambda []
    (let ([x (car *queue*)])
      (set! *queue* (cdr *queue*))
      x)))

(define run-scheduler
  (lambda []
    (define value
      (call/cc
        (lambda [c]
          (set! *scheduler* c)
          'SCHEDULER)))
    (when *queue*
      ((dequeue) value)
      (*scheduler* 'SCHEDULER))))

(define-syntax fork
  (lambda_ forms
    @('enqueue (cons* 'lambda '[_] forms))))

(define yield
  (lambda [value]
    (call/cc
      (lambda [c]
        (enqueue c)
        (*scheduler* value)))))

;#############################################

(define *output* ())

(define say
  (lambda [x]
    (set! *output* (append *output* (list x)))))

(define say-n-times
  (lambda [from n]
    (when (> n 0)
      (say (list from 'before n))
      (let ([x (yield from)])
        (say (list from 'after n x))
        (say-n-times from (- n 1))))))

(fork (say-n-times 'AA 3))
(fork (say-n-times 'BB 5))
(fork (say-n-times 'CC 7))
(run-scheduler)

*output*
