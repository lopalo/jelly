
(define-syntax check
  (lambda [form predicate expected actual]
    @('when @('not @(predicate expected actual))
      (copy-meta form @('fail @('string-append
                                "ASSERT ERROR: "
                                @('object->string actual)))))))

(define not-equal?
  (>> equal? not))

(define not-identical?
  (>> identical? not))

(check equal? '(18) ((>>* * inc inc inc list) 3 5))

(check equal? "zzzzz" (make-string 5 \z))
(check equal? "cdef" (substring "abcdefghi" 2 4))
(check equal? '(\a \b \c \d) (string->list "abcd"))
(check equal? "abcd" (list->string '(\a \b \c \d)))
(check equal? \d (string-ref "abcde" 3))
(check equal? '(true false) (list (procedure? >>*) (procedure? "precedure")))

(check equal?
       '(\G \j 74 \K)
       (list (char-upcase \g)
             (char-downcase \J)
             (char->integer \J)
             (integer->char 75)))

(check equal?
       '(243.0 5.0)
       (list (pow 3.0 5)
             (=> 243 log (/ (log 3)) round)))
(check equal?
       '(841470 540302)
       (list (=> 1 sin (* 1000000) truncate)
             (=> 1 cos (* 1000000) truncate)))

(check equal? (vector 1 2 3) (vector 1 2 3))
(check equal? (vector 1 (list 2) 3) (list->vector '(1 (2) 3)))
(check equal? (vector 8 8 8) (make-vector 3 8))
(check not-equal? (vector 1 2 3) (vector 1 2 3 3))
(check not-equal? (vector 1 2 3) (vector 1 2 4))
(check not-identical? (vector 1 2 3) (vector 1 2 3))
(let ([vec (vector 1 2 3)])
  (vector-set! vec 1 777)
  (check equal? 3 (vector-ref vec 2))
  (check equal? 777 (vector-ref vec 1))
  (check equal? (vector 1 777 3) vec)
  (check equal? 3 (vector-length vec))
  (check identical? vec vec)
  (check equal? "#vec(1 777 3)" (object->string vec))
  (vector-fill! (vector 'q 'q 'q) 'q)
  (check equal? (vector 1 777 3) vec))

(let ([h1 (make-hashtable 100)]
      [h2 (make-hashtable 50)])
  (hashtable-set! h1 "foo" 1)
  (hashtable-set! h2 "foo" 1)
  (hashtable-set! h1 "bar" (list 2))
  (hashtable-set! h2 "bar" (list 2))
  (hashtable-set! h1 "baz" 3)
  (check not-equal? h1 h2)
  (hashtable-set! h2 "baz" 3)
  (check equal? h1 h2)
  (check not-identical? h1 h2)
  (check identical? h2 h2)
  (hashtable-set! h1 "bar" 777)
  (check not-equal? h1 h2)
  (check equal? (vector "bar" "baz" "foo") (hashtable-keys h1))
  (check equal? "#hmap([\"bar\" (2)] [\"baz\" 3] [\"foo\" 1])" (object->string h2))
  (hashtable-delete! h1 "foo")
  (check equal? 'zzz (hashtable-ref h1 "foo" 'zzz))
  (check equal? 777 (hashtable-ref h1 "bar" 'zzz))
  (check equal? (vector "bar" "baz") (hashtable-keys h1))
  (check equal? 2 (hashtable-size h1))
  (check equal? 3 (hashtable-size h2))
  (check equal? "#hmap([\"bar\" 777] [\"baz\" 3])" (object->string h1))
  (check equal? "#hmap([\"bar\" (2)] [\"baz\" 3] [\"foo\" 1])" (object->string h2)))

(namespace foo-ns
  (define a 666)
  (define b (* 2 a))
  (define-record-type point [x y z] true)
  (define p (make-point 3 5 7)))

(check equal? 666 foo-ns/a)

(define-record-type point [x y z] true)

(define p (make-point 3 5 7))

(check equal? p foo-ns/p)
(check equal? true (point? p))
(check equal? true (foo-ns/point? foo-ns/p))
(check equal? false (foo-ns/point? p))
(check equal? false (point? foo-ns/p))
(foo-ns/point-y-set! foo-ns/p 999)

(check not-equal? p foo-ns/p)
(check equal? 999 (foo-ns/point-y foo-ns/p))
(check equal? "#vec((#point) 3 5 7)" (object->string p))
(check equal? "#vec((#point) 3 999 7)" (object->string foo-ns/p))

(let ([unreachable (lambda [] (fail "UNREACHABLE"))])
  (check equal? "xxx baz bar foo"
         (try
           'foo1
           (try
             (try
               (define err (apply string-append* '("x" "x" "x")))
               (map (lambda [x]
                      (when (> x 5)
                        (try
                          'yyy
                          (fail err)
                          'yyy)))
                    '(3 4 5 6 7))
               (unreachable)
               222
               (catch e (fail (string-append e " baz"))))
             (unreachable)
             'bar
             (catch e (fail (string-append e " bar"))
                      (unreachable)))

           'foo2
           (unreachable)
           111
           (catch e (string-append e " foo"))))

  (check equal? "yyy baz bar"
         (try
           'foo
           (try
             (try
               (fail "yyy")
               (unreachable)
               222
               (catch e (fail (string-append e " baz"))))
             (unreachable)
             'bar
             (catch e (string-append e " bar")))
           (catch e (string-append e " foo")))))

'PASSED
